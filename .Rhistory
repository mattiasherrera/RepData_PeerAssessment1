x
rm(x)
x
x <- 2
g <- function() {
y <- 1
c(x, y)
}
g()
x
y
rm(x,g)
x <- 2
g <- function() {
y <<- 1
c(x, y)
}
g()
y
j <- function(x) {
y <- 2
function() {
c(x, y)
}
}
k <- j(1)
k
k()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(1:3)
m
getmean()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(1:3)
plusFunctions <- function (){
plustwo <- function(y) {
x <- y + 2
return(x)
}
plusthree <- function(y) {
x <- y + 3
return(x)
}
#the following line stores the two functions:
list(plustwo = plustwo, plusthree = plusthree)
}
plusFunctions(1)
a <- plusFunctions()
a
a$plustthree(2)
a$plusthree(2)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
a<-makeVector(1:3)
a
a$get()
a$set()
a$getmean()
a$setmean(2)
a$getmean()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a<-makeVector(1:3)
a$getmean()
a$get()
cahemean(a)
cachemean(a)
makeCacheMatrix <- function(x = matrix()) {
##Initialize the Inverse of the matrix inverse_x to NULL
Inverse_x <<- NULL
##function to set a new matrix y
setmatrix <- function(y){
##As a new matrix is created (y), reassigns x to the new matrix y
## using <<- to ensure the variable transcends the function environment
##and can be used outside (other functions)
x <<- y
##Asa new matrix y is introduced, we need to blank out the pre-calulated
##if we alredy calculated one
inverse_x <<-NULL
}
##function to store (get) the value of a new matrix x
getmatrix<- function()x
##function to set the inverse (not calculate), just get's an argument and passes it
##to the variable inverse_x (assigned using<<-)
setinverse <-function(inverse) inverse_x <<- inverse
##function to get the inverse inverse_x (not calculate)
getinverse <- function() inverse_x
##now we need to create the vector (length 4) containing all the functions, which
##is ultimately, what the makeCacheMatrix function returns
list(setmatrix=setmatrix,getmatrix=setmatrix,
setinverse=setinverse,getinverse=getinverse)
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x
x$getmatrix()
makeCacheMatrix <- function(x = matrix()) {
##Initialize the Inverse of the matrix inverse_x to NULL
Inverse_x <<- NULL
##function to set a new matrix y
setmatrix <- function(y){
##As a new matrix is created (y), reassigns x to the new matrix y
## using <<- to ensure the variable transcends the function environment
##and can be used outside (other functions)
x <<- y
##Asa new matrix y is introduced, we need to blank out the pre-calulated
##if we alredy calculated one
inverse_x <<-NULL
}
##function to store (get) the value of a new matrix x
getmatrix<- function()x
##function to set the inverse (not calculate), just get's an argument and passes it
##to the variable inverse_x (assigned using<<-)
setinverse <-function(inverse) inverse_x <<- inverse
##function to get the inverse inverse_x (not calculate)
getinverse <- function() inverse_x
##now we need to create the vector (length 4) containing all the functions, which
##is ultimately, what the makeCacheMatrix function returns
list(setmatrix=setmatrix,getmatrix=getmatrix,
setinverse=setinverse,getinverse=getinverse)
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
x<-makeCacheMatrix(m)
x
x$getmatrix()
inverse_x
makeCacheMatrix <- function(x = matrix()) {
##Initialize the Inverse of the matrix inverse_x to NULL
inverse_x <<- NULL
##function to set a new matrix y
setmatrix <- function(y){
##As a new matrix is created (y), reassigns x to the new matrix y
## using <<- to ensure the variable transcends the function environment
##and can be used outside (other functions)
x <<- y
##Asa new matrix y is introduced, we need to blank out the pre-calulated
##if we alredy calculated one
inverse_x <<-NULL
}
##function to store (get) the value of a new matrix x
getmatrix<- function()x
##function to set the inverse (not calculate), just get's an argument and passes it
##to the variable inverse_x (assigned using<<-)
setinverse <-function(inverse) inverse_x <<- inverse
##function to get the inverse inverse_x (not calculate)
getinverse <- function() inverse_x
##now we need to create the vector (length 4) containing all the functions, which
##is ultimately, what the makeCacheMatrix function returns
list(setmatrix=setmatrix,getmatrix=getmatrix,
setinverse=setinverse,getinverse=getinverse)
}
m
x<-makeCacheMatrix(m)
m
x
inverse_x
x$setmatrix(m)
f<-x$setmatrix(m)
f
m
n<- matrix(c(1,1, 1, 1), 2,2)
n
m
x$getmatrix()
x$setmatrix(n)
x$getmatrix()
cacheSolve <- function(x, ...) {
#First we pull the mean we already have calculated
inverse_x <- x$getinverse()
##if it's null because we have not calculated it or a new matrix has been
##entered
if(!isnull(inverse_x)){
message("getting cached inverse")
##return the cached inverse
return(inverse_x)
}
##If no inverse has been cached, let's calculate it
matrix<-x$getmatrix() ##get matrix we entered
inverse_x<-solve(matrix) ##calculate the inverse using solve()
x$setinverse(inverse_x) ##set the inverse
inverse_x ##return the inverse
}
m
x<-makeCacheMatrix(m)
x
x$getmatrix()
x$getinverse()
inv<-cacheSolve(x)
cacheSolve <- function(x, ...) {
#First we pull the mean we already have calculated
inverse_x <- x$getinverse()
##if it's null because we have not calculated it or a new matrix has been
##entered
if(!is.null(inverse_x)){
message("getting cached inverse")
##return the cached inverse
return(inverse_x)
}
##If no inverse has been cached, let's calculate it
matrix<-x$getmatrix() ##get matrix we entered
inverse_x<-solve(matrix) ##calculate the inverse using solve()
x$setinverse(inverse_x) ##set the inverse
inverse_x ##return the inverse
}
inv<-cacheSolve(x)
inv
inv<-cacheSolve(x)
inv
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
?rnorm
?rpois
?rep
x<-1:2
x
y<-rep(x,2)
y
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
x
?rnorm
e
plot(x,y)
?rbinom
?system.time()
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
libray(XML)
library(XML)
url <-"http://biostat.jhsph.edu/~jleek/contact.html"
?readlines()
con
htmlCode = readLines(con)
htmlCode
htmlCode[[10]]
row <- c(10,20,30,100)
htmlCode[[c]]
htmlCode[[row]]
nchar(htmlCode[[10]])
nchar(htmlCode[[20]])
nchar(htmlCode[[30]])
nchar(htmlCode[[100]])
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
html <- htmlTreeParse(url,UseInternalNodes = TRUE)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
html <- htmlTreeParse(url,UseInternal = TRUE)
?htmlTreeParse()
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
html <- htmlTreeParse(url,useInternalNodes = TRUE)
library(XML)
library(RCurl)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
xData <- getURL(fileURL)
doc <- xmlParse(xData)
library(XML)
library(RCurl)
fileURL <- "http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"
xData <- getURL(fileURL)
doc <- xmlParse(xData)
library(XML)
library(RCurl)
fileURL <- "http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"
##xData <- getURL(fileURL)
xData <- getURL(fileURL, ssl.verifypeer = FALSE)
doc <- xmlParse(xData)
con = url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for")
htmlCode = readLines(con)
close(con)
htmlCode
head(htmlCode)
x <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
head(x)
y <- data.table(x)
library(data.table)
y <- data.table(x)
head(y)
tables
tables()
y[2,]
y(sum(V5))
sum(x$V5)
sum(x$V4)
x2<- x[,4]
x2
sum(x2)
nrows(x)
nrow(x)
length(x2)
x <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
nrow(x)
head(x)
x[1300:1336,]
x <- read.fwf(
file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
head(x)
nrow(x)
y <- x[,5]
y
sum(y)
y <- x[,4]
sum(y)
url <-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
data <- read.csv(url,header=TRUE)
names(data)
data[123]
names <- names(data)
named[123]
names[123]
name1<-strsplit(data,"wgtp)
name1<-strsplit(data,"wgtp")
name1 <- strsplit(data,"wgtp")
?strsplit
name1 <- strsplit(data,c("wgtp"))
name1 <- strspli(names,"wgtp")
name1 <- strsplit(names,"wgtp")
name[123]
names[123]
name1[123]
url <-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
data <- read.csv(url,header=TRUE)
names <- names(data)
name1 <- strsplit(names,"wgtp")
name1[123]
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
GDP <- read.csv(file=url, header=FALSE, sep=",",nrows=190,skip=5)
head(GDP)
tail(GDP)
GDPcolumn<- GPD[,5]
GDPcolumn
GDPcolumn<- GDP[,5]
GDPcolumn
GDPcolumn<- GDP[,5]
GDPcolumn<-gsub(",","",GDPcolumn)
GDPcolumn
GDPcolumn<- GDP[,5]
GDPcolumn<-as.numeric(gsub(",","",GDPcolumn))
GDPcolumn
mean(GDPcolumn)
new <- grep("^United",countryNames)
new <- grep("^United",V1)
countryNames <- GDP[,1]
countryNames
countryNames <- GDP[,4]
countryNames
united <- grep("^United",countryNames)
united
GDP[united,4]
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
GDP <- read.csv(file=url, header=FALSE, sep=",",nrows=190,skip=6)
colnames(GDP)<- c("CountryCode","V2","V3","V4","V5","V6","V7","V8","V9","V10")
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
education <- read.csv(file=url, header=TRUE, sep=",")
data <- join(GDP,education,by="CountryCode")
library(plyr)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
GDP <- read.csv(file=url, header=FALSE, sep=",",nrows=190,skip=6)
colnames(GDP)<- c("CountryCode","V2","V3","V4","V5","V6","V7","V8","V9","V10")
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
education <- read.csv(file=url, header=TRUE, sep=",")
data <- join(GDP,education,by="CountryCode")
dim(data)
names(data)
head(data)
names(data)
tail(data)
specialnotes <- data[,19]
specialnotes
specialnotes <- data[,19]
specialnotes
march <- grep("Fiscal year end")
specialnotes <- data[,19]
specialnotes
march <- grep("Fiscal year end",specialnotes)
march
lenght(march)
length(march)
specialnotes <- data[,19]
specialnotes
march <- grep("Fiscal year end.March",specialnotes)
march
specialnotes <- data[,19]
specialnotes
march <- grep("Fiscal year end",specialnotes)
march
specialnotes <- data[,19]
specialnotes
march <- grep("Fiscal year end.March",specialnotes)
march
specialnotes <- data[,19]
specialnotes
march <- grep("Fiscal year end"."March",specialnotes)
march <- grep("Fiscal year end"."March",specialnotes)
march <- grep("Fiscal year end: March",specialnotes)
march
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
dim(sampleTimes)
sampleTimes
date2012 <- grep("^2012",sampleTimes)
date2012
length(date2012)
install.packages("lubridate")
library(lubridate)
wday(date2012)
x <- dmy(date2012)
x
date2012
date2012 <- sampleTimes[[grep("^2012",sampleTimes)]]
date2012
sampleTimes
date2012 <- sampleTimes[[grep("^2012",sampleTimes)]]
date2012 <- sampleTimes[grep("^2012",sampleTimes)]
date2012
date2012 <- sampleTimes[grep("^2012",sampleTimes)]
date2012
length(date2012)
x <- ymd(date2012)
x
y <- wday(date2012,label=TRUE)
y
z<- grep("Mon",y)
z
length(z)
instal.packages("lattice")
install.packages("lattice")
install.packages("nmle")
library(nmle)
library(lattice)
library(nmle)
xyplot(weight ~ Time | Diet, BodyWeight)
nmle
install.packages("nlme")
library(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
str(BodyWeight)
library(datasets)
data(airquality)
library(ggplt)
library(ggplot)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
setwd("~/2015/Education/Reproducible Research/RepData_PeerAssessment1")
?qplot
?qplot
